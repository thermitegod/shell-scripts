#!/usr/bin/env python3
# 5.3.2
# 2020-08-21

# Copyright (C) 2018,2019,2020 Brandon Zorn <brandonzorn@cock.li>
#
# This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <https://www.gnu.org/licenses/>.

import argparse
import os
import shutil
from pathlib import Path
from tempfile import TemporaryDirectory

from utils import kernel
from utils import utils


class Clean:
    def __init__(self):
        self.__kdir = Path(kernel.get_kernel_dir())

    def kernel_rm(self):
        ksym = Path(self.__kdir)
        if Path.is_symlink(ksym):
            Path.unlink(ksym)

        for dirs in Path(self.__kdir.parent).iterdir():
            kdirs = Path() / Path(self.__kdir).parent / dirs
            shutil.rmtree(kdirs)

    def kernel_clean(self):
        cmd = 'make distclean'

        if Path.exists(Path() / self.__kdir / '.config'):
            with TemporaryDirectory() as tmpdir:
                kernel.kernel_conf_move(src=self.__kdir, dst=tmpdir)
                os.chdir(str(self.__kdir))
                utils.run_cmd(cmd)
                kernel.kernel_conf_move(src=tmpdir, dst=self.__kdir)
        else:
            os.chdir(str(self.__kdir))
            utils.run_cmd(cmd)

    def run(self, args):
        if args.rm:
            self.kernel_rm()
        elif args.clean:
            self.kernel_clean()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--clean',
                        action='store_true',
                        help='clean only /usr/src/linux symlink')
    parser.add_argument('-r', '--rm',
                        action='store_true',
                        help='remove all /usr/src/linux/*')
    args = parser.parse_args()

    utils.root_check(require_root=True)

    run = Clean()
    run.run(args)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit
