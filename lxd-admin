#!/bin/sh
#5.2.0
#2018-11-24

#Copyright (C) 2018 Brandon Zorn, brandonzorn@cock.li
#
#This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

#misc
#lxc will not mount on symlinks, but can mount through them

hlp(){
	printf "\nDISTRO, which template to use\n"
	printf "\nCurrent is: ${distro}\n"
	printf " -a\talpine\n"
	printf " -g\tgentoo\n"
	printf "CONTAINER, only use to limit actions on specified\n"
	printf " -T\tOnly run on transmission, uses :9091 as port\n"
	printf " -R\tOnly run on rutorrent\n"
	printf "CONTAINER BASE\n"
	printf " -b\tstart template images\n"
	printf " -B\tstop template images\n"
	printf "\nCONTAINER GENERAL\n"
	printf " -d\tDelete containers\n"
	printf " -D\tDelete old containers\n"
	printf " -h\tPrint this help\n"
	printf " -r\tRestart all\n"
	printf " -s\tStart all\n"
	printf " -u\tUpdate, rename existing with 'old-*' prefix\n"
	printf " -z\tStop all\n"
	printf "\nIMAGE GENERAL, req -IT or -IR, needs work\n"
	printf " -IT\trun for transmission\n"
	printf " -IR\trun for rutorrent\n"
	printf " -ex\texport\n"
	printf " -im\timport, wip\n"
	printf " -in\tinit\n"
	printf " -pb\tpublish\n"
	printf "\nSPECIFIC, no other flags req\n"
	printf " -c\trtorrent lockfile cleanup\n"
	printf " -C\trutorrent cleanup only, remove *.torrent files in \$config/rutorrent/share/torrents/\n"
	printf "\nOTHER\n"
	printf " -e\tedit ${container_info}\n"
	printf " -p\tPrint container vars only\n"
	printf " -P\tPrint container vars and required directories\n"
}

dirset(){
	#not in container
	storage="/mnt/torrents"
	config="${storage}/.config/${cname}"
	session="${config}/session"
	watch="${config}/watch"
	save="${storage}/${cname}"
	if [ -n "${save_override}" ];then save="${save_override}";fi
	case "${ctype}" in
		rutorrent)
			#in container
			case "${distro}" in
				alpine) var="/usr/share/webapps/rutorrent/share";;
				gentoo) var="/var/www/localhost/htdocs/rutorrent/share";;
			esac
			#not in container
			rushare="${config}/rutorrent/share"
			setbase="/home/brandon"
			inside_data="${setbase}/${ctype}/data"
			inside_watch="${setbase}/${ctype}/watch"
			inside_session="${setbase}/${ctype}/session"
			;;
		transmission)
			#in container
			setbase="/var/lib/transmission"
			inside_data="${setbase}/downloads"
			inside_session="${setbase}/config"
			;;
	esac

	if [ "${get_dirs}" = "1" ];then return;fi

	if ! [ -e "${config}" ];then mkdir -pv "${config}"; fi
	if ! [ -e "${save}" ];then mkdir -pv "${save}"; fi
	if ! [ -e "${session}" ];then mkdir -pv "${session}"; fi
	if ! [ -e "${watch}" ];then mkdir -pv "${watch}"; fi
	if ! [ -e "${rushare}" ] && [ "${ctype}" = "rutorrent" ];then mkdir -pv "${rushare}";fi

	lxc config device add "${fullname}" storage disk source="${save}" path="${inside_data}"
	lxc config device add "${fullname}" session disk source="${session}" path="${inside_session}"
	if [ "${ctype}" = "rutorrent" ];then
		lxc config device add "${fullname}" watch disk source="${watch}" path="${inside_watch}"
		lxc config device add "${fullname}" ru disk source="${rushare}" path="${var}"
	fi
}

set_ip(){
	printf "Seting StaticIP for ${fullname} to 192.168.0.${ip4}\n"
	tmp=$(mktemp)
	case "${distro}" in
		alpine)
			net="${fullname}/etc/network/interfaces"
			printf "auto eth0\niface eth0 inet static\n\taddress 192.168.0.${ip4}\n\tnetmask 255.255.255.0\n\tgateway 192.168.0.1\n">|"${tmp}"
			;;
		gentoo)
			net="${fullname}/etc/conf.d/net"
			printf "rc_keyword=\"-stop\"\nconfig_eth0=\"192.168.0.${ip4} netmask 255.255.255.0 brd 192.168.0.255\"\nroutes_eth0=\"default via 192.168.0.1\"\n">|"${tmp}"
			;;
	esac
	lxc file push "${tmp}" "${net}"
	if [ -f "${tmp}" ];then rm "${tmp}";fi
}

rtorrent_clean_lock(){
	get_dirs="1"
	dirset
	lock="${session}/rtorrent.lock"
	if [ -f "${lock}" ];then rm -v "${lock}";fi
	get_dirs="0"
}

base_img(){
	printf "${A}ing: base-${distro}-rutorrent\n"
	lxc "${A}" base-${distro}-rutorrent
	printf "${A}ing: base-${distro}-transmission\n"
	lxc "${A}" base-${distro}-transmission
}

main_images(){
	template_image="${template}"
	case "${act_img}" in
		publish) lxc publish "${template}" --alias "${template_image}";;
		export) lxc image export "${baseimg_new}";;
		#TODO : import will be done if i need it
		#import) lxc import <*tar> --alias $name ;;
		init)
			lxc init "${template_image}" "${template}"
			lxc config device add "${template}" eth0 nic name=eth0 nictype=bridged parent=br0
			lxc config set "${template}" security.privileged true
			lxc config set "${template}" limits.cpu 8
			lxc config set "${template}" limits.memory 8192MB
			;;
	esac
}

main_container(){
	template="base-${distro}-${ctype}"
	fullname="${ctype}-${cname}"
	if [ "${limit}" = "1" ] && ! [ "${limit_to}" = "${ctype}" ];then return;fi
	case "${act}" in
		stop) printf "Stoping container: ${fullname}\n";lxc stop "${fullname}";;
		start) printf "Starting container: ${fullname}\n";lxc start "${fullname}";;
		delete) printf "Deleteing container: ${fullname}\n";lxc delete "${fullname}";;
		restart) printf "Restarting container: ${fullname}\n";lxc restart "${fullname}";;
		deleteold) printf "Deleting container: old-${fullname}\n";lxc delete "old-${fullname}";;
		rt_cleanup_lock) rtorrent_clean_lock;;
		ru_cleanup)
			get_dirs="1"
			dirset
			#if [ $(find ${rushare}/share/torrents -type f -quit) ];then echo n;return;fi
			rm ${rushare}/torrents/*.torrent
			get_dirs="0"
			;;
		update)
			printf "Renaming ${fullname} to old-${fullname}\n"
			lxc rename "${fullname}" "old-${fullname}"

			printf "Copying ${template} to ${fullname}\n"
			lxc copy "${template}" "${fullname}"

			dirset
			set_ip
			rtorrent_clean_lock
			;;
		print)
			printf "Name\t\t: ${cname}\n"
			printf "Container\t: ${ctype}\n"
			printf "IPV4\t\t: 192.168.0.${ip4}\n"
			if [ "${verbose}" = "1" ];then
			dirset
			printf "rushare\t\t: ${rushare}\n"
			printf "session\t\t: ${session}\n"
			printf "watch\t\t: ${watch}\n"
			printf "save\t\t: ${save}\n"
			if [ -z "${save_override}" ];then save_override="none";fi
			printf "save override\t: ${save_override}\n"
			fi
			printf "\n"
			;;
	esac
}

act="z"
act_img="z"
limit_to="z"
#distro="alpine"
distro="gentoo"

limit="0"
verbose="0"
get_dirs="0"
printonly="0"

container_info="${HOME}/.bin/bin-extra/lxd-admin"

if [ -z "${1}" ];then hlp;exit;fi
while true;do
	case "${1}" in
		#distro
		-a) distro="alpine";shift;;
		-g) distro="gentoo";shift;;
		#image
		-IT) template="base-${distro}-transmission";shift;;
		-IR) template="base-${distro}-rutorrent";shift;;
		-pb) act_img="publish";shift;;
		-ex) act_img="export";shift;;
		-im) exit;act_img="import";shift;;
		-in) act_img="init";shift;;
		#containers
		-b) A="start";base_img;exit;;
		-B) A="stop";base_img;exit;;
		-T) limit="1";limit_to="transmission";shift;;
		-R) limit="1";limit_to="rutorrent";shift;;
		-c) act="rt_cleanup_lock";limit="1";limit_to="rutorrent";shift;;
		-C) act="ru_cleanup";limit="1";limit_to="rutorrent";shift;;
		-d) act="delete";shift;;
		-D) act="deleteold";shift;;
		-r) act="restart";shift;;
		-s) act="start";shift;;
		-u) act="update";shift;;
		-z) act="stop";shift;;
		-p) act="print";get_dirs="1";shift;;
		-P) act="print";get_dirs="1";verbose="1";shift;;
		-h) hlp;exit;;
		-e) $EDITOR "${container_info}";exit;;
		*) break;;
	esac
done

if ! [ "${act_img}" = "z" ];then main_images;exit;fi

if ! [ -f "${container_info}" ];then
	printf "all containers are declared in ${container_info} using the following format, subject to change\n"
	printf "'container type' 'IPV4 ending' 'container name' 'save location override, optional'\n"
	printf "example: rutorrent 161 anime /mnt/anime/anime-working\n"
	exit 1
fi

while IFS=' ' read -r ctype ip4 cname save_override;do
	main_container
done < "${container_info}"

