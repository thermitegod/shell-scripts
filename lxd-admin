#!/bin/sh
#5.11.0
#2019-03-03

#Copyright (C) 2018,2019 Brandon Zorn, brandonzorn@cock.li
#
#This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

#misc
#lxc will not mount on symlinks, but can mount through them

#TODO
#condense main function
#alpine auto setup, using guide in ~/docs. put in script, push script, exec in container
#push rtorrent/transmission/php/lighttd config files too

hlp(){
	printf "\nCONTAINER, only use to limit actions to specified\n"
	printf " -R\tOnly run on rutorrent\n"
	printf " -T\tOnly run on transmission, note: port is :${transmission_port}\n"
	printf " -O\tOnly operate in the supplied container, requires full container name\n"
	printf "\nCONTAINER SERVICES\n"
	printf " -L\trestart lighttpd limited to rutorrent containers\n"
	printf " -l\trestart rtorrent limited to rutorrent containers\n"
	printf "\nCONTAINER GENERAL\n"
	printf " -d\tDelete containers\n"
	printf " -D\tDelete '${old_prefix}' containers\n"
	printf " -h\tPrint this help\n"
	printf " -H\tprint file setup guide: ${container_info}\n"
	printf " -r\tRestart containers\n"
	printf " -s\tStart containers\n"
	printf " -S\tStart '${old_prefix}' containers\n"
	printf " -u\tUpdate, rename existing with '${old_prefix}' prefix\n"
	printf " -U\tUpdate, delete existing instead of renaming\n"
	printf " -x\tStop '${old_prefix}' containers\n"
	printf " -X\tForce stop '${old_prefix}' containers\n"
	printf " -z\tStop containers\n"
	printf " -Z\tForce stop containers\n"
	printf "\nSPECIFIC, no other flags req\n"
	printf " -c\trtorrent lockfile cleanup\n"
	printf " -C\trutorrent cleanup only, remove *.torrent files in \$config/rutorrent/share/torrents/\n"
	printf "\nOTHER\n"
	printf " -e\tedit ${container_info}\n"
	printf " -E\tcat ${container_info}\n"
	printf " -P\tPrint all container vars\n"
	printf " -p\tPrint limited container vars\n"
}

hlp2(){
	printf "All containers are declared in '${container_info}' using the following space delimited format, subject to change\n"
	printf "\n'container type' 'distro' 'ipv4' 'limit cpu' 'limit cpu allowance' 'limit mem' 'container name' 'save location override, optional'\n"
	printf "\nParsing of '${container_info}'\nSkips line if: line starts with '#', line is blank, or 'container name' is not set\nScript exits when a line that starts with 'stop' is read\n"
	printf "\nNOTE: to not use limits, set them to '0'\n"
	printf "\nexample:\n# this line will be skipped\nrutorrent gentoo 192.168.0.161 6 10%% 8192MB anime /mnt/anime/anime-working\nstop #nothing below this line will be run\n"
}

set_dirs(){
	#not in container
	storage="/mnt/torrents"
	config="${storage}/.config/${cname}"
	session="${config}/session"
	watch="${config}/watch"
	save="${storage}/${cname}"
	if [ -n "${save_override}" ];then save="${save_override}";fi
	#in container
	case "${ctype}" in
		rutorrent)
			case "${distro}" in
				alpine) var="/usr/share/webapps/rutorrent/share";;
				gentoo) var="/var/www/localhost/htdocs/rutorrent/share";;
			esac
			rushare="${config}/rutorrent/share"
			setbase="/home/brandon"
			inside_data="${setbase}/rtorrent/data"
			inside_watch="${setbase}/rtorrent/watch"
			inside_session="${setbase}/rtorrent/session"
			;;
		transmission)
			setbase="/var/lib/transmission"
			inside_data="${setbase}/downloads"
			inside_session="${setbase}/config"
			;;
	esac

	if [ "${get_dirs}" = "1" ];then return;fi

	if ! [ -e "${config}" ];then mkdir -pv "${config}";fi
	if ! [ -e "${save}" ];then mkdir -pv "${save}";fi
	if ! [ -e "${session}" ];then mkdir -pv "${session}";fi
	if ! [ -e "${watch}" ] && [ "${ctype}" = "rutorrent" ];then mkdir -pv "${watch}";fi
	if ! [ -e "${rushare}" ] && [ "${ctype}" = "rutorrent" ];then mkdir -pv "${rushare}";fi

	lxc config device add "${fullname}" storage disk source="${save}" path="${inside_data}"
	lxc config device add "${fullname}" session disk source="${session}" path="${inside_session}"
	if [ "${ctype}" = "rutorrent" ];then
		lxc config device add "${fullname}" watch disk source="${watch}" path="${inside_watch}"
		lxc config device add "${fullname}" ru disk source="${rushare}" path="${var}"
	fi
}

set_ip(){
	printf "Seting StaticIP to ${ip4}\n"
	tmp=$(mktemp)
	case "${distro}" in
		alpine)
			net="${fullname}/etc/network/interfaces"
			printf "auto eth0\niface eth0 inet static\n\taddress ${ip4}\n\tnetmask ${ip4_netmask}\n\tgateway ${ip_gateway}\n">|"${tmp}"
			;;
		gentoo)
			net="${fullname}/etc/conf.d/net"
			printf "rc_keyword=\"-stop\"\nconfig_eth0=\"${ip4} netmask ${ip4_netmask} brd ${ip4_brd}\"\nroutes_eth0=\"default via ${ip4_gateway}\"\n">|"${tmp}"
			;;
	esac
	lxc file push "${tmp}" "${net}"
	if [ -f "${tmp}" ];then rm "${tmp}";fi
}

set_limits(){
	if ! [ "${lim_cpu}" = "0" ];then lxc config set "${fullname}" limits.cpu "${lim_cpu}";fi
	if ! [ "${lim_cpu_allow}" = "0" ];then lxc config set "${fullname}" limits.cpu.allowance "${lim_cpu_allow}";fi
	if ! [ "${lim_mem}" = "0" ];then lxc config set "${fullname}" limits.memory "${lim_mem}";fi
}

rtorrent_clean_lock(){
	get_dirs="1"
	set_dirs
	lock="${session}/rtorrent.lock"
	if [ -f "${lock}" ];then rm -v "${lock}";fi
	get_dirs="0"
}

get_state(){ if [ "$(lxc info ${1}|grep Running)" ];then is_running="1";fi; }

main_container(){
	#order matters here
	if [ -n "$(echo ${ctype}|grep '\#')" ];then return;fi #skip comments
	if [ -n "$(echo ${ctype}|grep stop)" ];then exit;fi #exit when 'stop' is read
	if [ -z "$(echo ${cname})" ];then return;fi #skip blank lines, TODO: need to find a better way to do these
	case "${distro}" in
		alpine) true;;
		gentoo) true;;
		*) printf "skipping non supported distro : ${distro}\n";return;;
	esac
	template="base-${distro}-${ctype}"
	fullname="${ctype}-${cname}"
	if [ "${catch_single}" = "1" ];then
		if ! [ "${catch}" = "${fullname}" ];then return;fi
	fi
	if [ "${on_old}" = "1" ];then fullname="${old_prefix}-${fullname}";fi
	if [ "${limit}" = "1" ] && ! [ "${limit_to}" = "${ctype}" ];then return;fi
	case "${act}" in
		stop)
			get_state "${fullname}"
			if [ "${is_running}" = "0" ];then return;fi
			printf "Stopping container: ${fullname}\n";lxc stop "${fullname}" &;;
		start)
			get_state "${fullname}"
			if [ "${is_running}" = "1" ];then return;fi
			printf "Starting container: ${fullname}\n";sleep .1;lxc start "${fullname}" &;;
		delete)
			get_state "${fullname}"
			if [ "${is_running}" = "1" ];then printf "Must stop before deleting: ${fullname}\n";return;fi
			printf "Deleteing container: ${fullname}\n";lxc delete "${fullname}" &;;
		restart)
			get_state "${fullname}"
			if [ "${is_running}" = "0" ];then return;fi
			printf "Restarting container: ${fullname}\n";lxc restart "${fullname}" &;;
		forcestop)
			get_state "${fullname}"
			if [ "${is_running}" = "0" ];then return;fi
			printf "Force stopping container: ${fullname}\n";lxc stop --force "${fullname}" &;;
		rt_cleanup_lock) rtorrent_clean_lock;;
		restart_service_rutorrent)
			get_state "${fullname}"
			if [ "${is_running}" = "0" ];then return;fi
			if [ "${service}" = "rtorrent" ];then
				printf "\nRestarting rtorrent on: ${fullname}\n\n"
				lxc exec "${fullname}" rc-service rtorrent restart >/dev/null 2>&1 &
			elif [ "${service}" = "lighttpd" ];then
				printf "\nRestarting lighttpd on: ${fullname}\n\n"
				lxc exec "${fullname}" rc-service lighttpd restart >/dev/null 2>&1 &
			fi
			;;
		ru_cleanup)
			set_dirs
			rm -v ${rushare}/torrents/*.torrent
			;;
		update)
			get_state "${template}"
			if [ "${is_running}" = "1" ];then
				printf "Stopping: ${template}\n"
				lxc stop "${template}"
				printf "\n\n"
			fi

			printf "Update running for : ${fullname}\n"

			if [ "$(echo ${lxclist}|grep ${fullname})" ] && [ "${update_keep_old}" = "1" ];then
				printf "Renaming ${fullname} to ${old_prefix}-${fullname}\n"
				lxc rename "${fullname}" "${old_prefix}-${fullname}"
			elif [ "$(echo ${lxclist}|grep ${fullname})" ] && [ "${update_keep_old}" = "0" ];then
				printf "Deleting ${fullname}\n"
				lxc delete "${fullname}"
			fi

			printf "Copying ${template} to ${fullname}\n"
			lxc copy "${template}" "${fullname}"

			if [ "${distro}" = "gentoo" ];then
				#removes unneeded access to filesystem on gentoo containers
				lxc config device remove "${fullname}" distfiles
				lxc config device remove "${fullname}" packages
				lxc config device remove "${fullname}" repos
			fi

			set_limits
			set_dirs
			set_ip
			rtorrent_clean_lock
			printf "\n"
			;;
		print)
			get_state "${fullname}"
			printf "Container Name\t: ${fullname}\n"
			printf "Name\t\t: ${cname}\n"
			printf "Template\t: ${ctype}\n"
			printf "Distro\t\t: ${distro}\n"
			if [ "${ctype}" = "transmission" ];then ip4="${ip4}:${transmission_port}";fi
			printf "IPV4\t\t: ${ip4}\n"
			if [ "${is_running}" = "1" ];then state="on";else state="off";fi
			printf "On/Off\t\t: ${state}\n"
			if [ "${verbose}" = "1" ];then
				printf "Limit CPU\t: ${lim_cpu}\n"
				printf "Limit CPU ALLOW\t: %s\n" "${lim_cpu_allow}"
				printf "Limit MEM\t: ${lim_mem}\n"
				set_dirs
				printf "session\t\t: ${session}\n"
				if [ "${ctype}" = "rutorrent" ];then
					printf "rushare\t\t: ${rushare}\n"
					printf "watch\t\t: ${watch}\n"
				fi
				printf "save\t\t: ${save}\n"
				if [ -n "${save_override}" ];then printf "save override\t: active\n";fi
			fi
			printf "\n"
			;;
	esac
}

limit="0"
on_old="0"
verbose="0"
get_dirs="0"
printonly="0"
is_running="0"
catch_single="0"
update_keep_old="1"

transmission_port="9091"

ip4_brd="192.168.0.255"
ip4_gateway="192.168.0.1"
ip4_netmask="255.255.255.0"

limit_to="z"
old_prefix="old"
lxclist=$(lxc list)

. $(dirname "$0")/utils.sh
container_info="${extra}/lxd-admin"

if [ -z "${1}" ];then hlp;exit;fi
while getopts "O:TRCDPZUHESXLlxcdrsuzphe" OPT;do
	case "${OPT}" in
		T) limit="1";limit_to="transmission";;
		R) limit="1";limit_to="rutorrent";;
		c) act="rt_cleanup_lock";limit_to="rutorrent";;
		C) act="ru_cleanup";limit_to="rutorrent";get_dirs="1";;
		d) act="delete";;
		D) act="delete";on_old="1";;
		r) act="restart";;
		s) act="start";;
		S) act="start";on_old="1";;
		u) act="update";;
		U) act="update";update_keep_old="0";;
		x) act="stop";on_old="1";;
		X) act="forcestop";on_old="1";;
		z) act="stop";;
		Z) act="forcestop";;
		p) act="print";;
		P) act="print";get_dirs="1";verbose="1";;
		L) act="restart_service_rtorrent";service="lighttpd";limit="1";limit_to="rutorrent";;
		l) act="restart_service_rtorrent";service="rtorrent";limit="1";limit_to="rutorrent";;
		A) catch_single="1";catch=${OPTARG};;
		h) hlp;exit;;
		H) hlp2;exit;;
		e) $EDITOR "${container_info}";exit;;
		E) cat "${container_info}";exit;;
	esac
done
shift $((OPTIND - 1))

if ! [ -f "${container_info}" ];then hlp2;exit 1;fi

while IFS=' ' read -r ctype distro ip4 lim_cpu lim_cpu_allow lim_mem cname save_override;do
	main_container
done < "${container_info}"

