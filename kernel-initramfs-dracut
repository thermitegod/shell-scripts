#!/usr/bin/env python3
# 1.1.0
# 2019-03-12

# Copyright (C) 2020 Brandon Zorn <brandonzorn@cock.li>
#
# This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <https://www.gnu.org/licenses/>.

import argparse

from utils import utils


def main():
    parser = argparse.ArgumentParser()
    group1 = parser.add_argument_group('Initramfs', 'Control initramfs generation')
    group1.add_argument('-c', '--compression',
                        default='lz4',
                        type=str,
                        help='compression algo used to compress initramfs [lz4]')
    group1.add_argument('-f', '--no-firmware',
                        action='store_true',
                        help='do not include firmware in initramfs')
    group1.add_argument('-k', '--kver',
                        type=str,
                        help='kernel version to gen initramfs for')
    args = parser.parse_args()

    utils.is_root()

    cmd = '/usr/bin/dracut ' \
          '--hostonly ' \
          '--force ' \
          '--nofscks ' \
          f'--compress {args.compression} ' \
          '-o "systemd systemd-initrd systemd-networkd" ' \
          '-o "lvmmerge btrfs dm dmraid dmsquash-live-ntfs lvm mdraid stratis cifs iscsi nfs" ' \
          '-o "modsign rngd network-legacy biosdevname masterkey bootchart" ' \
          '-o "crypt crypt-gpg" ' \
          '-o "i18n" '

    kver = args.kver
    if kver:
        if kver.endswith('-gentoo'):
            cmd += f'--kver {kver} '
        else:
            cmd += f'--kver {kver}-gentoo '

    if not args.no_firmware:
        cmd += '-i /lib/firmware /lib/firmware '

    utils.run_cmd(cmd)


if __name__ == '__main__':
    main()
