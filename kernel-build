#!/usr/bin/env sh
#2.14.2
#2019-01-13

#Copyright (C) 2018,2019 Brandon Zorn, brandonzorn@cock.li
#
#This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

#ZFS Builtin Kernel Build Script - gentoo

#hard requirments
#>=linux-4.17.0 : >=zfs-0.8.0 / git | 1.x.x script for previous support

#storage dirs - need to exist
#/home/${user}/.config/kernel/{config,distfiles,src}

#assumptions
#/usr/src/linux is real source or symlink to real source
#$run_kernel_bump is based om my own config and others CONFIG_* options may be needed based on kenrel config

###What this script does, basically###

###if no preconfigured kmod_zfs sources exist###
#runs configure phase on kmod-zfs ebuild
#saves work/ to tar.zst file in $kmod_src
#installs configured kmod-zfs to /usr/src/linux
#builds kernel

###if preconfigured kmod_zfs sources exist###
#moves saved work in tar.zst file to /usr/src/linux
#builds kernel

die(){ /bin/echo -e "\033[0;31m$*\033[m";exit 1; }
if [ "$(id -u)" -ne 0 ];then die "Requires root";fi

finish(){ if [ -d "${tmpdir}" ];then rm --preserve-root -r "${tmpdir}";fi; }
trap 'exit 1' INT HUP QUIT TERM USR1
trap finish EXIT
tmpdir=$(mktemp -d)
chmod 755 "${tmpdir}"

msc(){ make syncconfig; }
cdkdir(){ cd "${kdir}" || die "ERROR: can not cd into kenrel directory"; }

user="brandon"
group="${user}"
storage="/home/${user}/.config/kernel"
ksym="/usr/src/linux"
kdir="$(readlink -f ${ksym})"
use_zfs_version="git"

run_intro="1"
run_emerge="1"
run_zfs_build="1"
run_kernel_post="1"
run_kernel_build="1"
run_kernel_install="1"

intro_extra="0"
use_distdir="0"
run_kmod_build="0"
use_local_zfs_ebuild="0"

if ! [ -e "${ksym}" ];then die "ERROR: ${ksym} is not a valid symlink";fi
if ! [ -d "${storage}/config" ];then mkdir -p "${storage}/config";fi

if ! [ -f "${kdir}/.config" ];then
	if [ -f "/proc/config.gz" ];then
		printf "WARNING: no kernel config found, using config from running kernel\n"
		zcat /proc/config.gz >| /usr/src/linux/.config || die
		cdkdir
		msc
	else
		die "ERROR: no config in kenrel directory and no running config is available"
	fi
fi

if [ -n "$(grep CONFIG_MODULES=y ${kdir}/.config)" ];then use_modules="1";else use_modules="0";fi

case "$(echo ${kdir##*/}|grep rc)" in
	*rc*) kver="$(echo ${kdir##*/linux-}|sed s'/.$//')";;
	*) kver="$(echo ${kdir##*/linux-}|awk 'BEGIN{FS=OFS="."} NF--')";;
esac

switch_kconf="${storage}/config/${kver}-config"
if [ -f "${switch_kconf}" ];then run_kernel_bump="0";else run_kernel_bump="1";fi

while getopts "BbdgrceIimplxzvh" OPT;do
	case "$OPT" in
		B) run_kernel_bump="1";;
		b) run_kernel_bump="0";;
		d) use_distdir="1";;
		c) run_kmod_build="1";;
		e) run_emerge="0";;
		g) use_zfs_version="git";;
		I) run_intro="0";;
		i) run_kernel_install="0";run_kernel_post="0";;
		l) use_local_zfs_ebuild="1";;
		p) run_kernel_post="0";;
		m) use_modules="1";;
		r) use_zfs_version="release";;
		x) run_zfs_build="0";;
		v) intro_extra="1";;
		z) run_zfs_build="1";run_kernel_build="0";run_kernel_post="0";;
		h)
			printf "GENERAL\n"
			printf " -b\tforce run_kernel_bump=0\n"
			printf " -B\tforce run_kernel_bump=1\n"
			printf " -h\tprint this help\n"
			printf " -I\tdisable  intro\n"
			printf " -v\textra vars in intro\n"
			printf "\nZFS\n"
			printf " -c\tbuild kmod even if preconfigured sources exist\n"
			printf " -d\tuse \$DISTDIR from make.conf\n"
			printf " -e\tdisable running emerge in post\n"
			printf " -g\tuse git ebuild\n"
			printf " -r\tuse release ebuild\n"
			printf " -l\tuse local repo in PORTDIR_OVERLAY\n"
			printf "\nKERNEL BUILDING\n"
			printf " -i\tbuild kernel but do not install or run post\n"
			printf " -m\tenable module build\n"
			printf " -p\tdisable post actions\n"
			printf " -x\tdisable zfs build, all checks must still pass, script becomes fancy 'make;make install'\n"
			printf " -z\tonly run zfs build, will install zfs into kenrel tree\n"
			exit;;
	esac
done

#CONFIG_MODULES and CONFIG_KALLSYMS are required to build kmod
#which are not needed at runtime if zfs is build into the kernel.
while [ "${run_kernel_bump}" = "1" ];do
	if ! [ -f "${switch_kconf}" ];then cp "${kdir}/.config" "${switch_kconf}";fi
	c1=$(grep -s CONFIG_MODULES=y ${switch_kconf})
	c2=$(grep -s CONFIG_KALLSYMS=y ${switch_kconf})
	if [ "${run_zfs_build}" = "1" ] && [ -z "${c1}" ] || [ -z "${c2}" ];then
		printf "\nRequired option[s] located at:\n"
		if [ -z "${c1}" ];then printf "\n[*] Enable loadable module support\n";fi
		if [ -z "${c2}" ];then printf "\nGeneral setup  --->\n\t[*] Configure standard kernel features (expert users)  --->\n\t\t[*] Load all symbols for debugging/ksymoops\n\n";fi
		printf "Enter to config switch config : "
		read z;unset z
		if [ -f "${switch_kconf}" ];then rm "${switch_kconf}";fi
		cdkdir
		make nconfig
		cp .config "${switch_kconf}"
		chown "${user}:${group}" "${switch_kconf}"
	else break
	fi
done

case "${use_local_zfs_ebuild}" in
	0) port="$(grep location /etc/portage/repos.conf/gentoo.conf|awk '{print $3}')";;
	1) port="$(grep location /etc/portage/repos.conf/local.conf|awk '{print $3}')";;
esac

case "${use_zfs_version}" in
	git)
		zver="9999"
		kmod="zfs-kmod" #build path
		;;
	release)
		Z=$(ls -1A --ignore=*9999* ${port}/sys-fs/zfs|sort -V|tail -n1)
		zver=$(echo ${Z%%.ebuild}|awk '{print $NF}' FS=-) #clean up filename
		unset Z
		kmod="zfs" #build path
		if [ "${use_distdir}" = "0" ];then export DISTDIR="${storage}/distfiles";fi #keep sources on dist-clean
		;;
esac

if ! [ -d "${port}/sys-fs/zfs" ];then die "ERROR: missing directory ${port}/sys-fs/zfs";fi
if ! [ -d "${port}/sys-fs/zfs-kmod" ];then die "ERROR: missing directory ${port}/sys-fs/zfs-kmod";fi
if ! [ -f "${port}/sys-fs/zfs/zfs-${zver}.ebuild" ];then die "ERROR: missing zfs-${zver}.ebuild";fi
if ! [ -f "${port}/sys-fs/zfs-kmod/zfs-kmod-${zver}.ebuild" ];then die "ERROR: missing zfs-kmod-${zver}.ebuild";fi

kmod_src="${storage}/src/${kver}/${zver}"
if ! [ -d "${kmod_src}" ] && [ "${run_zfs_build}" = "1" ];then run_kmod_build="1";fi #need to build if configured src do not exists

if [ "${run_intro}" = "1" ];then
	printf "\n"
	printf "kernel             : ${kdir}\n"
	printf "Install Kernel     : ${run_kernel_install}\n"
	printf "ZFS version        : ${zver}\n"
	printf "ZFS local ebuild   : ${use_local_zfs_ebuild}\n"
	printf "Configure kmod     : ${run_kmod_build}\n"
	printf "Enable modules     : ${use_modules}\n"
	printf "Running emerge     : ${run_emerge}\n"
	if [ "${intro_extra}" = "1" ];then
		printf "\nEXTRA\n"
		printf "Make opts          : $(($(nproc)+1))\n"
		printf "PORTDIR            : ${port}\n"
		printf "kver               : ${kver}\n"
		printf "Tempdir            : ${tmpdir}\n"
		printf "\n"
		eselect kernel list
	fi
	printf "\n"
	printf "Enter to start kernel build. "
	read z;unset z
fi

if [ "${run_zfs_build}" = "1" ];then
	if [ "${run_kmod_build}" = "1" ];then
		cdkdir
		msc
		if [ "${use_modules}" = "0" ];then
			mv .config "${tmpdir}"
			cp "${switch_kconf}" .config
		fi
		make prepare

		export PORTAGE_TMPDIR="${tmpdir}"
		if [ -d "${kmod_src}" ];then rm --preserve-root -r "${kmod_src}";fi
		mkdir -p "${kmod_src}"
		CC=gcc env EXTRA_ECONF="--with-linux=${kdir} --enable-linux-builtin" \
			ebuild "${port}/sys-fs/zfs-kmod/zfs-kmod-${zver}.ebuild" clean configure
		cd "${tmpdir}/portage/sys-fs/zfs-kmod-${zver}/work/${kmod}-${zver}" || die
		./copy-builtin "${kdir}" || die
		cd ..
		tar -cf - "${kmod}-${zver}" -P | zstd -T0 >| "zfs-${zver}.tar.zst" || die "ERROR: did not compress zfs work dir"
		mv "zfs-${zver}.tar.zst" "${kmod_src}"
		chown -R "${user}:${group}" "${kmod_src}"

		if [ "${use_modules}" = "0" ];then
			rm "${kdir}/.config"
			mv "${tmpdir}/.config" "${kdir}"
		fi
	else
		cd "${kmod_src}" || die
		tar -I zstd -xf "zfs-${zver}.tar.zst" -C "${tmpdir}" || die "ERROR: cannot extract zfs work dir"
		cd "${tmpdir}/${kmod}-${zver}" || die
		./copy-builtin "${kdir}" || die "ERROR: copy-builtin failed"
	fi
fi

if [ "${run_kernel_build}" = "1" ];then
	cdkdir
	msc
	nice -19 make -j$(($(nproc)+1)) || die "ERROR: kernel build failed"
	if [ "${run_kernel_install}" = "1" ];then
		if [ "${use_modules}" = "1" ];then make modules_install;fi
		make install
	fi
fi

if [ "${run_kernel_post}" = "1" ];then
	if [ "${run_emerge}" = "1" ];then
		if [ "${run_kmod_build}" = "1" ] && [ "${use_zfs_version}" = "git" ];then
			#always rebuild zfs when building git
			emerge --ignore-default-opts --oneshot --quiet sys-fs/zfs
		elif [ "${run_kmod_build}" = "1" ] && [ "${use_zfs_version}" = "release" ];then
			#only builds on non-git and on version bump
			emerge --ignore-default-opts --oneshot --quiet --update sys-fs/zfs
		fi
		if [ "${use_modules}" = "1" ];then emerge --ignore-default-opts --oneshot --jobs @module-rebuild;fi
	fi
	kernel-initramfs-genkernel
	kernel-grub
	kernel-clean-src -c
fi
